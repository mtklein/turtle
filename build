#!/usr/bin/env python3

modes = {
    'dbg': '',
    'opt': '-Os',
    'lto': '-Os -flto',
    'san': '-fsanitize=address,integer,undefined -fno-sanitize-recover=all',
}

import os
import subprocess
import sys

srcs  = subprocess.check_output(['git', 'grep', '-lw',        '.', '**.c']).decode('utf-8').split()
mains = subprocess.check_output(['git', 'grep', '-lw', 'int main', '**.c']).decode('utf-8').split()

rules = '''
builddir = out

cc = clang -fcolor-diagnostics -Weverything -Xclang -nostdsysteminc

rule compile
    command = $cc -g -Werror -MD -MF $out.d -c $in -o $out
    depfile = $out.d
    deps    = gcc

rule syms
    command = nm -g $in > $out

rule link
    command = $cc $in -o $out

rule run
    command = ./$in > $out
'''

with open('build.ninja', 'w') as f:
    f.write(rules)
    for mode,flags in modes.items():
        for src in srcs:
            obj = os.path.join('out', mode, src.replace('.c','.o'))
            f.write(f'build {obj}: compile {src}\n')
            f.write(f'    cc = $cc {flags}\n')
            f.write(f'build {obj.replace(".o",".syms")}: syms {obj}\n')

subprocess.check_call(['ninja'] + sys.argv[1:])

with open('build.ninja', 'w') as f:
    f.write(rules)
    for mode,flags in modes.items():
        syms = {}
        for src in srcs:
            obj = os.path.join('out', mode, src.replace('.c','.o'))
            for line in open(obj.replace('.o','.syms')).readlines():
                parts = line.split()
                kind,sym = parts[-2],parts[-1]
                if kind != 'U':
                    syms[sym] = obj

        deps = {}
        for src in srcs:
            obj = os.path.join('out', mode, src.replace('.c','.o'))
            deps[obj] = set()
            for line in open(obj.replace('.o','.syms')).readlines():
                parts = line.split()
                kind,sym = parts[-2],parts[-1]
                if sym in syms and kind == 'U':
                    deps[obj].add(syms[sym])

        for src in mains:
            obj = os.path.join('out', mode, src.replace('.c','.o'))
            exe = obj.replace('.o','')
            f.write(f'build {exe}: link {obj}')
            for dep in deps[obj]:  #TODO: recursive deps
                f.write(f' {dep}')
            f.write(f'\n    cc = $cc {flags}\n')
            f.write(f'build {obj.replace(".o",".ok")}: run {exe}\n')

subprocess.check_call(['ninja'] + sys.argv[1:])

os.remove('build.ninja')
subprocess.check_call(['git', 'add', '-u'])
